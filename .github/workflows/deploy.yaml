name: CI/CD Pipeline for React App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --force

      - name: Prettier check
        run: npm run format:check

      - name: ESLint check
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test -- --coverage --watchAll=false

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --force

      - name: Clean TS build cache
        run: npx tsc --build --clean

      - name: Build React app
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-dist
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: react-dist
          path: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=86400" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }} \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront cache (if using CloudFront)
        run: |
          if [ ! -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi

      - name: Notify deployment success
        run: |
          echo "üöÄ Deployment successful!"
          echo "üåê Website URL: https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION || 'us-east-1' }}.amazonaws.com"

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
